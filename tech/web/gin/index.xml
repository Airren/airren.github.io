<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gin on ByteGopher</title>
    <link>https://airren.github.io/tech/web/gin/</link>
    <description>Recent content in Gin on ByteGopher</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 29 Dec 2018 11:02:05 +0600</lastBuildDate><atom:link href="https://airren.github.io/tech/web/gin/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>「Gin」Gin入门</title>
      <link>https://airren.github.io/tech/web/gin/gin_overview/</link>
      <pubDate>Fri, 21 Aug 2020 00:43:48 +0000</pubDate>
      
      <guid>https://airren.github.io/tech/web/gin/gin_overview/</guid>
      <description>学好一个框架或者一门语言，最好的方法就是要学会看官方的Document。几乎所有的博客只是把自己对官方文档的理解重新加工整理出来而已，增加了自己的主管想法。
刚入门的时候面对英文文档可能一头雾水，但是当你坚持下来，你会发现，这些官方文档写的要比那些博客好的多，表述精确的多。
以后我的文章会主要参考官方文档展开介绍，顺带加一点自己的理解
GitHub
Official Document
1. Gin 简介 The fastest full-featured web freamwork for Go. Crystal clear.
快 支持中间件 Crash还原 JSON验证 路由分组 错误日志收集 模板渲染 可扩展 2. 快速用Gin搭建一个Web服务 1go get -u github.com/gin-gonic/gin # install Gin 2 3mkdir gin_demo &amp;amp;&amp;amp; cd gin_demo 4 5vi main.go main.go的内容如下
1package main 2 3import ( 4	&amp;#34;net/http&amp;#34; 5	&amp;#34;github.com/gin-gonic/gin&amp;#34; 6 7) 8 9func main(){ 10	r := gin.Default() 11 12	r.GET(&amp;#34;/ping&amp;#34;, func(c *gin.Context){ 13	c.</description>
    </item>
    
    <item>
      <title>「Gin」Gin Http 请求处理</title>
      <link>https://airren.github.io/tech/web/gin/gin_http/</link>
      <pubDate>Tue, 08 Sep 2020 00:01:52 +0000</pubDate>
      
      <guid>https://airren.github.io/tech/web/gin/gin_http/</guid>
      <description>https://www.yoytang.com/go-gin-doc.html#%e8%b7%af%e7%94%b1(Router)
1. Gin的HTTP请求 1.1 Gin支持的各种HTTP请求 1func main() { 2	// Creates a gin router with default middleware: 3	// logger and recovery (crash-free) middleware 4	router := gin.Default() 5 6	router.GET(&amp;#34;/someGet&amp;#34;, getting) 7	router.POST(&amp;#34;/somePost&amp;#34;, posting) 8	router.PUT(&amp;#34;/somePut&amp;#34;, putting) 9	router.DELETE(&amp;#34;/someDelete&amp;#34;, deleting) 10	router.PATCH(&amp;#34;/somePatch&amp;#34;, patching) // 11	router.HEAD(&amp;#34;/someHead&amp;#34;, head) // 12	router.OPTIONS(&amp;#34;/someOptions&amp;#34;, options) 13 14	// By default it serves on :8080 unless a 15	// PORT environment variable was defined. 16	router.</description>
    </item>
    
    <item>
      <title>「Gin」 项目目录</title>
      <link>https://airren.github.io/tech/web/gin/project_category/</link>
      <pubDate>Wed, 23 Sep 2020 00:07:14 +0000</pubDate>
      
      <guid>https://airren.github.io/tech/web/gin/project_category/</guid>
      <description>Gin 项目目录 1├─ Project Name 2│ ├─ config //配置文件 3│ ├── ... 4│ ├─ controller //控制器层，验证提交的数据，将验证完成的数据提交给service 5│ ├── ... 6│ ├─ service //业务层， 只完成业务逻辑得开发，不进行数据库的操作 7│ ├── ... 8│ ├─ repository //数据库操作层 dal/ dao; 数据库操作层，写，多表插入，多表查询，不写业务代码 9│ ├── ... 10│ ├─ model //数据库ORM 11│ ├── ... 12│ ├─ entity //实体 写返回数据的结构体。写controller层方法参数验证的结构体 13│ ├── ... 14│ ├─ proto //proto文件 写 gRPC 的 *.pb.go 文件。 15│ ├── ... 16│ ├─ router //路由 17│ ├── middleware //路由中间件 （鉴权，日志，异常捕获） 18│ ├── .</description>
    </item>
    
    <item>
      <title>「Swagger」 Gin 项目使用swagger</title>
      <link>https://airren.github.io/tech/web/gin/swagger/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://airren.github.io/tech/web/gin/swagger/</guid>
      <description>安装并使用Swaggo testsetes
1go get -u -x github.com/swaggo/swag/cmd/swag Gin中使用Swagger</description>
    </item>
    
  </channel>
</rss>
